EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
tictactoe_TEST.exe_ -- emu8086 assembler version: 4.08  
 
[ 21.01.2025  --  10:20:57 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       data segment
[   2]    0000: 0D 0A 24                              new_line db 13, 10, "$"
[   3]        :                                       
[   4]    0003: 31 7C 32 7C 33 0D 0A                  game_draw db "1|2|3", 13, 10
[   5]    000A: 34 7C 35 7C 36 0D 0A                  db "4|5|6", 13, 10
[   6]    0011: 37 7C 38 7C 39 0D 0A 24               db "7|8|9", 13, 10, "$"
[   7]    0019: 5F 5F 5F 5F 5F 5F 5F 5F 5F 5F 2E 5F   banner db "__________.__        __                              __   .__         ",13,10
                5F 20 20 20 20 20 20 20 20 5F 5F 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 5F 5F 20 20 20 2E 5F 
                5F 20 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[   8]    0061: 5C 5F 5F 5F 5F 5F 5F 20 20 20 5C 5F   db "\______   \__| _____/  |________  ______  _  _______|  | _|__|        ",13,10
                5F 7C 20 5F 5F 5F 5F 5F 2F 20 20 7C 
                5F 5F 5F 5F 5F 5F 5F 5F 20 20 5F 5F 
                5F 5F 5F 5F 20 20 5F 20 20 5F 5F 5F 
                5F 5F 5F 5F 7C 20 20 7C 20 5F 7C 5F 
                5F 7C 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[   9]    00A9: 20 7C 20 20 20 20 20 5F 5F 5F 2F 20   db " |     ___/  |/  _ \   __\_  __ \/  _ \ \/ \/ /  ___/  |/ /  |        ",13,10
                20 7C 2F 20 20 5F 20 5C 20 20 20 5F 
                5F 5C 5F 20 20 5F 5F 20 5C 2F 20 20 
                5F 20 5C 20 5C 2F 20 5C 2F 20 2F 20 
                20 5F 5F 5F 2F 20 20 7C 2F 20 2F 20 
                20 7C 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  10]    00F1: 20 7C 20 20 20 20 7C 20 20 20 7C 20   db " |    |   |  (  <_> )  |  |  | \(  <_> )     /\___ \|    <|  |        ",13,10
                20 28 20 20 3C 5F 3E 20 29 20 20 7C 
                20 20 7C 20 20 7C 20 5C 28 20 20 3C 
                5F 3E 20 29 20 20 20 20 20 2F 5C 5F 
                5F 5F 20 5C 7C 20 20 20 20 3C 7C 20 
                20 7C 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  11]    0139: 20 7C 5F 5F 5F 5F 7C 20 20 20 7C 5F   db " |____|   |__|\____/|__|  |__|   \____/ \/\_//______>__|_ \__|        ",13,10
                5F 7C 5C 5F 5F 5F 5F 2F 7C 5F 5F 7C 
                20 20 7C 5F 5F 7C 20 20 20 5C 5F 5F 
                5F 5F 2F 20 5C 2F 5C 5F 2F 2F 5F 5F 
                5F 5F 5F 5F 3E 5F 5F 7C 5F 20 5C 5F 
                5F 7C 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  12]    0181: 20 20 20 20 20 20 20 20 20 20 20 20   db "                                                   _     \/           ",13,10
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 5F 20 20 20 20 20 5C 2F 20 
                20 20 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  13]    01C9: 20 20 5F 5F 5F 5F 5F 5F 5F 5F 5F 20   db "  _________     ___.   .__                        /_/        ___   ___",13,10
                20 20 20 20 5F 5F 5F 2E 20 20 20 2E 
                5F 5F 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 2F 5F 2F 20 20 20 20 20 20 20 
                20 5F 5F 5F 20 20 20 5F 5F 5F 0D 0A 
                                                    
[  14]    0211: 20 2F 20 20 20 5F 5F 5F 5F 5F 2F 20   db " /   _____/ ____\_ |__ |__| ________________    ____   _____|  | _|__|",13,10
                5F 5F 5F 5F 5C 5F 20 7C 5F 5F 20 7C 
                5F 5F 7C 20 5F 5F 5F 5F 5F 5F 5F 5F 
                5F 5F 5F 5F 5F 5F 5F 5F 20 20 20 20 
                5F 5F 5F 5F 20 20 20 5F 5F 5F 5F 5F 
                7C 20 20 7C 20 5F 7C 5F 5F 7C 0D 0A 
                                                    
[  15]    0259: 20 5C 5F 5F 5F 5F 5F 20 20 5C 20 2F   db " \_____  \ /  _ \| __ \|  |/ __ \_  __ \__  \  /    \ /  ___/  |/ /  |",13,10
                20 20 5F 20 5C 7C 20 5F 5F 20 5C 7C 
                20 20 7C 2F 20 5F 5F 20 5C 5F 20 20 
                5F 5F 20 5C 5F 5F 20 20 5C 20 20 2F 
                20 20 20 20 5C 20 2F 20 20 5F 5F 5F 
                2F 20 20 7C 2F 20 2F 20 20 7C 0D 0A 
                                                    
[  16]    02A1: 20 2F 20 20 20 20 20 20 20 20 28 20   db " /        (  <_> ) \_\ \  \  ___/|  | \// __ \|   |  \\___ \|    <|  |",13,10
                20 3C 5F 3E 20 29 20 5C 5F 5C 20 5C 
                20 20 5C 20 20 5F 5F 5F 2F 7C 20 20 
                7C 20 5C 2F 2F 20 5F 5F 20 5C 7C 20 
                20 20 7C 20 20 5C 5C 5F 5F 5F 20 5C 
                7C 20 20 20 20 3C 7C 20 20 7C 0D 0A 
                                                    
[  17]    02E9: 2F 5F 5F 5F 5F 5F 5F 5F 5F 5F 2F 5C   db "/_________/\____/|___  /__|\___  >__|  (____  /___|  /______>__|_ \__|",13,10
                5F 5F 5F 5F 2F 7C 5F 5F 5F 20 20 2F 
                5F 5F 7C 5C 5F 5F 5F 20 20 3E 5F 5F 
                7C 20 20 28 5F 5F 5F 5F 20 20 2F 5F 
                5F 5F 7C 20 20 2F 5F 5F 5F 5F 5F 5F 
                3E 5F 5F 7C 5F 20 5C 5F 5F 7C 0D 0A 
                                                    
[  18]    0331: 20 20 20 20 20 20 20 20 20 20 20 20   db "                     \/        \/           \/     \/            \/   ",13,10
                20 20 20 20 20 20 20 20 20 5C 2F 20 
                20 20 20 20 20 20 20 5C 2F 20 20 20 
                20 20 20 20 20 20 20 20 5C 2F 20 20 
                20 20 20 5C 2F 20 20 20 20 20 20 20 
                20 20 20 20 20 5C 2F 20 20 20 0D 0A 
                                                    
[  19]    0379: 20 20 20 20 20 20 20 20 20 20 20 20   db "                              __        __      __                    ",13,10
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 5F 5F 20 20 20 20 
                20 20 20 20 5F 5F 20 20 20 20 20 20 
                5F 5F 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  20]    03C1: 20 20 20 20 20 20 5F 5F 5F 5F 5F 5F   db "      _____________  ____    |__| ____ |  | ___/  |_                  ",13,10
                5F 5F 5F 5F 5F 5F 5F 20 20 5F 5F 5F 
                5F 20 20 20 20 7C 5F 5F 7C 20 5F 5F 
                5F 5F 20 7C 20 20 7C 20 5F 5F 5F 2F 
                20 20 7C 5F 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  21]    0409: 20 20 20 20 20 20 5C 5F 5F 5F 5F 20   db "      \____ \_  __ \/  _ \   |  |/ __ \|  |/ /\   __\                 ",13,10
                5C 5F 20 20 5F 5F 20 5C 2F 20 20 5F 
                20 5C 20 20 20 7C 20 20 7C 2F 20 5F 
                5F 20 5C 7C 20 20 7C 2F 20 2F 5C 20 
                20 20 5F 5F 5C 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  22]    0451: 20 20 20 20 20 20 7C 20 20 7C 5F 3E   db "      |  |_> >  | \(  <_> )  |  \  ___/|    <  |  |                   ",13,10
                20 3E 20 20 7C 20 5C 28 20 20 3C 5F 
                3E 20 29 20 20 7C 20 20 5C 20 20 5F 
                5F 5F 2F 7C 20 20 20 20 3C 20 20 7C 
                20 20 7C 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  23]    0499: 20 20 20 20 20 20 7C 20 20 20 5F 5F   db "      |   __/|__|   \____/\__|  |\___  >__|_ \ |__|                   ",13,10
                2F 7C 5F 5F 7C 20 20 20 5C 5F 5F 5F 
                5F 2F 5C 5F 5F 7C 20 20 7C 5C 5F 5F 
                5F 20 20 3E 5F 5F 7C 5F 20 5C 20 7C 
                5F 5F 7C 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 0D 0A 
                                                    
[  24]    04E1: 20 20 20 20 20 20 7C 5F 5F 7C 20 20   db "      |__|               \______|    \/     \/                        ",13,10, "$"
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 5C 5F 5F 5F 5F 5F 5F 7C 20 20 20 
                20 5C 2F 20 20 20 20 20 5C 2F 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 0D 0A 
                24                                  
[  25]        :                                       
[  26]    052A: 00 00 00 00 00 00 00 00 00            game_pointer db 9 DUP(0)
[  27]        :                                       
[  28]    0533: 00                                    win_flag db 0
[  29]    0534: 30 24                                 player db "0$"
[  30]    0536: 00                                    moves_counter db 0
[  31]        :                                       
[  32]    0537: 54 49 43 2D 54 41 43 2D 54 4F 45 0D   game_over_message db "TIC-TAC-TOE", 13, 10, "$"
                0A 24                               
[  33]    0545: 54 49 43 2D 54 41 43 2D 54 4F 45 0D   game_start_message db "TIC-TAC-TOE", 13, 10, "$"
                0A 24                               
[  34]    0553: 50 4C 41 59 45 52 20 24               player_message db "PLAYER $"
[  35]    055B: 20 57 49 4E 53 21 24                  win_message db " WINS!$"
[  36]    0562: 54 59 50 45 20 41 20 50 4F 53 49 54   type_message db "TYPE A POSITION: $"
                49 4F 4E 3A 20 24                   
[  37]    0574: 0D 0A 57 52 4F 4E 47 20 50 4F 53 49   wrong_position_message db 13,10,"WRONG POSITION! YOU MISSED YOUR TURN! $"
                54 49 4F 4E 21 20 59 4F 55 20 4D 49 
                53 53 45 44 20 59 4F 55 52 20 54 55 
                52 4E 21 20 24                      
[  38]    059D: 0D 0A 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D   game_end_draw_message db 13,10,"-------------GAME ENDED------------ DRAW!---------$"
                2D 2D 2D 47 41 4D 45 20 45 4E 44 45 
                44 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 
                2D 20 44 52 41 57 21 2D 2D 2D 2D 2D 
                2D 2D 2D 2D 24                      
[  39]    05D2: 50 4C 41 59 45 52 20 30 20 2D 20 58   which_player_message db "PLAYER 0 - X, PLAYER 1 - O",13,10,"$"
                2C 20 50 4C 41 59 45 52 20 31 20 2D 
                20 4F 0D 0A 24                      
[  40]        :                                       ends
[  41]        :                                       
[  42]        :                                       stack segment
[  43]    05F0: 00 00 00 00 00 00 00 00 00 00 00 00   dw   128  dup(?)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  44]        :                                       ends
[  45]        :                                       
[  46]        :                                       extra segment
[  47]        :                                       
[  48]        :                                       ends
[  49]        :                                       
[  50]        :                                       code segment
[  51]    06F0:                                       start:
[  52]        :                                       ; set segment registers
[  53]    06F0: B8 00 00                              mov     ax, data
[  54]    06F3: 8E D8                                 mov     ds, ax
[  55]    06F5: B8 6F 00                              mov     ax, extra
[  56]    06F8: 8E C0                                 mov     es, ax
[  57]        :                                       ; banner
[  58]    06FA: BA 19 00                              lea     dx, banner
[  59]    06FD: E8 0D 02                              call print
[  60]        :                                       ; waiting for key
[  61]    0700: E8 18 02                              call read_keyboard
[  62]        :                                       ; game start
[  63]    0703: E8 E3 01                              call    set_game_pointer
[  64]        :                                       
[  65]    0706:                                       main_loop:
[  66]    0706: E8 09 02                              call    clear_screen
[  67]        :                                       
[  68]    0709: BA 45 05                              lea     dx, game_start_message
[  69]    070C: E8 FE 01                              call    print
[  70]        :                                       
[  71]    070F: BA 00 00                              lea     dx, new_line
[  72]    0712: E8 F8 01                              call    print
[  73]        :                                       
[  74]    0715: BA 53 05                              lea     dx, player_message
[  75]    0718: E8 F2 01                              call    print
[  76]        :                                       
[  77]    071B: BA 34 05                              lea     dx, player
[  78]    071E: E8 EC 01                              call    print
[  79]        :                                       
[  80]    0721: BA 00 00                              lea     dx, new_line
[  81]    0724: E8 E6 01                              call    print
[  82]        :                                       
[  83]    0727: BA D2 05                              lea     dx,which_player_message
[  84]    072A: E8 E0 01                              call    print
[  85]        :                                       
[  86]    072D: BA 03 00                              lea     dx, game_draw
[  87]    0730: E8 DA 01                              call    print
[  88]        :                                       
[  89]    0733: BA 00 00                              lea     dx, new_line
[  90]    0736: E8 D4 01                              call    print
[  91]        :                                       
[  92]    0739: BA 62 05                              lea     dx, type_message
[  93]    073C: E8 CE 01                              call    print
[  94]        :                                       
[  95]    073F: A0 36 05                              mov     al,moves_counter
[  96]    0742: 3C 09                                 cmp     al,9
[  97]    0744: 75 03 E9 95 01                        je      game_end_draw
[  98]        :                                       
[  99]    0749: A2 36 05                              mov     moves_counter,al
[ 100]        :                                       
[ 101]        :                                       ; read draw position
[ 102]    074C: E8 CC 01                              call    read_keyboard
[ 103]        :                                       
[ 104]        :                                       ; calculate draw position
[ 105]    074F: 2C 31                                 sub     al, 49
[ 106]    0751: B7 00                                 mov     bh, 0
[ 107]    0753: 8A D8                                 mov     bl, al
[ 108]        :                                       
[ 109]    0755: E8 1A 00                              call    update_draw
[ 110]        :                                       
[ 111]    0758: E8 64 00                              call    check
[ 112]        :                                       
[ 113]        :                                       ; check if game ends
[ 114]    075B: 80 3E 33 05 01                        cmp     win_flag, 1
[ 115]    0760: 75 03 E9 44 01                        je      game_over
[ 116]        :                                       
[ 117]    0765: E8 02 00                              call    change_player
[ 118]        :                                       
[ 119]    0768: EB 9C                                 jmp     main_loop
[ 120]        :                                       
[ 121]        :                                       
[ 122]    076A:                                       change_player:
[ 123]    076A: BE 34 05                              lea     si, player
[ 124]    076D: 3E 80 34 01                           xor     ds:[si], 1
[ 125]        :                                       
[ 126]    0771: C3                                    ret
[ 127]        :                                       
[ 128]        :                                       
[ 129]    0772:                                       update_draw:
[ 130]    0772: 8A 9F 2A 05                           mov     bl, game_pointer[bx]
[ 131]    0776: B7 00                                 mov     bh, 0
[ 132]        :                                       
[ 133]    0778: BE 34 05                              lea     si, player
[ 134]        :                                       
[ 135]    077B: 3E 80 3C 30                           cmp     ds:[si], "0"
[ 136]    077F: 74 06                                 je      draw_x
[ 137]        :                                       
[ 138]    0781: 3E 80 3C 31                           cmp     ds:[si], "1"
[ 139]    0785: 74 16                                 je      draw_o
[ 140]        :                                       
[ 141]    0787:                                       draw_x:
[ 142]    0787: 3E 80 3F 78                           cmp     ds:[bx], "x"
[ 143]    078B: 75 03 E9 90 01                        je      position_taken
[ 144]    0790: 3E 80 3F 6F                           cmp     ds:[bx], "o"
[ 145]    0794: 75 03 E9 87 01                        je      position_taken
[ 146]    0799: B1 78                                 mov     cl, "x"
[ 147]    079B: EB 16                                 jmp     update
[ 148]        :                                       
[ 149]    079D:                                       draw_o:
[ 150]    079D: 3E 80 3F 78                           cmp     ds:[bx], "x"
[ 151]    07A1: 75 03 E9 7A 01                        je      position_taken
[ 152]    07A6: 3E 80 3F 6F                           cmp     ds:[bx],"o"
[ 153]    07AA: 75 03 E9 71 01                        je      position_taken
[ 154]    07AF: B1 6F                                 mov     cl, "o"
[ 155]    07B1: EB 00                                 jmp     update
[ 156]        :                                       
[ 157]    07B3:                                       update:
[ 158]    07B3: 3E 88 0F                              mov     ds:[bx], cl
[ 159]    07B6: A0 36 05                              mov     al,moves_counter
[ 160]    07B9: FE C0                                 inc     al
[ 161]    07BB: A2 36 05                              mov     moves_counter,al
[ 162]        :                                       
[ 163]    07BE: C3                                    ret
[ 164]        :                                       
[ 165]        :                                       
[ 166]    07BF:                                       check:
[ 167]    07BF: E8 01 00                              call    check_line
[ 168]    07C2: C3                                    ret
[ 169]        :                                       
[ 170]        :                                       
[ 171]    07C3:                                       check_line:
[ 172]    07C3: B9 00 00                              mov     cx, 0
[ 173]        :                                       
[ 174]    07C6:                                       check_line_loop:
[ 175]    07C6: 83 F9 00                              cmp     cx, 0
[ 176]    07C9: 74 0E                                 je      first_line
[ 177]        :                                       
[ 178]    07CB: 83 F9 01                              cmp     cx, 1
[ 179]    07CE: 74 0E                                 je      second_line
[ 180]        :                                       
[ 181]    07D0: 83 F9 02                              cmp     cx, 2
[ 182]    07D3: 74 0E                                 je      third_line
[ 183]        :                                       
[ 184]    07D5: E8 38 00                              call    check_column
[ 185]    07D8: C3                                    ret
[ 186]        :                                       
[ 187]    07D9:                                       first_line:
[ 188]    07D9: BE 00 00                              mov     si, 0
[ 189]    07DC: EB 0A                                 jmp     do_check_line
[ 190]        :                                       
[ 191]    07DE:                                       second_line:
[ 192]    07DE: BE 03 00                              mov     si, 3
[ 193]    07E1: EB 05                                 jmp     do_check_line
[ 194]        :                                       
[ 195]    07E3:                                       third_line:
[ 196]    07E3: BE 06 00                              mov     si, 6
[ 197]    07E6: EB 00                                 jmp     do_check_line
[ 198]        :                                       
[ 199]    07E8:                                       do_check_line:
[ 200]    07E8: 41                                    inc     cx
[ 201]        :                                       
[ 202]    07E9: B7 00                                 mov     bh, 0
[ 203]    07EB: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 204]    07EF: 3E 8A 07                              mov     al, ds:[bx]
[ 205]    07F2: 3C 5F                                 cmp     al, "_"
[ 206]    07F4: 74 D0                                 je      check_line_loop
[ 207]        :                                       
[ 208]    07F6: 46                                    inc     si
[ 209]    07F7: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 210]    07FB: 3E 3A 07                              cmp     al, ds:[bx]
[ 211]    07FE: 75 C6                                 jne     check_line_loop
[ 212]        :                                       
[ 213]    0800: 46                                    inc     si
[ 214]    0801: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 215]    0805: 3E 3A 07                              cmp     al, ds:[bx]
[ 216]    0808: 75 BC                                 jne     check_line_loop
[ 217]        :                                       
[ 218]        :                                       
[ 219]    080A: C6 06 33 05 01                        mov     win_flag, 1
[ 220]    080F: C3                                    ret
[ 221]        :                                       
[ 222]        :                                       
[ 223]        :                                       
[ 224]    0810:                                       check_column:
[ 225]    0810: B9 00 00                              mov     cx, 0
[ 226]        :                                       
[ 227]    0813:                                       check_column_loop:
[ 228]    0813: 83 F9 00                              cmp     cx, 0
[ 229]    0816: 74 0E                                 je      first_column
[ 230]        :                                       
[ 231]    0818: 83 F9 01                              cmp     cx, 1
[ 232]    081B: 74 0E                                 je      second_column
[ 233]        :                                       
[ 234]    081D: 83 F9 02                              cmp     cx, 2
[ 235]    0820: 74 0E                                 je      third_column
[ 236]        :                                       
[ 237]    0822: E8 3C 00                              call    check_diagonal
[ 238]    0825: C3                                    ret
[ 239]        :                                       
[ 240]    0826:                                       first_column:
[ 241]    0826: BE 00 00                              mov     si, 0
[ 242]    0829: EB 0A                                 jmp     do_check_column
[ 243]        :                                       
[ 244]    082B:                                       second_column:
[ 245]    082B: BE 01 00                              mov     si, 1
[ 246]    082E: EB 05                                 jmp     do_check_column
[ 247]        :                                       
[ 248]    0830:                                       third_column:
[ 249]    0830: BE 02 00                              mov     si, 2
[ 250]    0833: EB 00                                 jmp     do_check_column
[ 251]        :                                       
[ 252]    0835:                                       do_check_column:
[ 253]    0835: 41                                    inc     cx
[ 254]        :                                       
[ 255]    0836: B7 00                                 mov     bh, 0
[ 256]    0838: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 257]    083C: 3E 8A 07                              mov     al, ds:[bx]
[ 258]    083F: 3C 5F                                 cmp     al, "_"
[ 259]    0841: 74 D0                                 je      check_column_loop
[ 260]        :                                       
[ 261]    0843: 83 C6 03                              add     si, 3
[ 262]    0846: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 263]    084A: 3E 3A 07                              cmp     al, ds:[bx]
[ 264]    084D: 75 C4                                 jne     check_column_loop
[ 265]        :                                       
[ 266]    084F: 83 C6 03                              add     si, 3
[ 267]    0852: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 268]    0856: 3E 3A 07                              cmp     al, ds:[bx]
[ 269]    0859: 75 B8                                 jne     check_column_loop
[ 270]        :                                       
[ 271]        :                                       
[ 272]    085B: C6 06 33 05 01                        mov     win_flag, 1
[ 273]    0860: C3                                    ret
[ 274]        :                                       
[ 275]        :                                       
[ 276]    0861:                                       check_diagonal:
[ 277]    0861: B9 00 00                              mov     cx, 0
[ 278]        :                                       
[ 279]    0864:                                       check_diagonal_loop:
[ 280]    0864: 83 F9 00                              cmp     cx, 0
[ 281]    0867: 74 06                                 je      first_diagonal
[ 282]        :                                       
[ 283]    0869: 83 F9 01                              cmp     cx, 1
[ 284]    086C: 74 09                                 je      second_diagonal
[ 285]        :                                       
[ 286]    086E: C3                                    ret
[ 287]        :                                       
[ 288]    086F:                                       first_diagonal:
[ 289]    086F: BE 00 00                              mov     si, 0
[ 290]    0872: BA 04 00                              mov     dx, 4
[ 291]    0875: EB 08                                 jmp     do_check_diagonal
[ 292]        :                                       
[ 293]    0877:                                       second_diagonal:
[ 294]    0877: BE 02 00                              mov     si, 2
[ 295]    087A: BA 02 00                              mov     dx, 2
[ 296]    087D: EB 00                                 jmp     do_check_diagonal
[ 297]        :                                       
[ 298]    087F:                                       do_check_diagonal:
[ 299]    087F: 41                                    inc     cx
[ 300]        :                                       
[ 301]    0880: B7 00                                 mov     bh, 0
[ 302]    0882: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 303]    0886: 3E 8A 07                              mov     al, ds:[bx]
[ 304]    0889: 3C 5F                                 cmp     al, "_"
[ 305]    088B: 74 D7                                 je      check_diagonal_loop
[ 306]        :                                       
[ 307]    088D: 03 F2                                 add     si, dx
[ 308]    088F: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 309]    0893: 3E 3A 07                              cmp     al, ds:[bx]
[ 310]    0896: 75 CC                                 jne     check_diagonal_loop
[ 311]        :                                       
[ 312]    0898: 03 F2                                 add     si, dx
[ 313]    089A: 8A 9C 2A 05                           mov     bl, game_pointer[si]
[ 314]    089E: 3E 3A 07                              cmp     al, ds:[bx]
[ 315]    08A1: 75 C1                                 jne     check_diagonal_loop
[ 316]        :                                       
[ 317]        :                                       
[ 318]    08A3: C6 06 33 05 01                        mov     win_flag, 1
[ 319]    08A8: C3                                    ret
[ 320]        :                                       
[ 321]        :                                       
[ 322]    08A9:                                       game_over:
[ 323]    08A9: E8 66 00                              call    clear_screen
[ 324]        :                                       
[ 325]    08AC: BA 45 05                              lea     dx, game_start_message
[ 326]    08AF: E8 5B 00                              call    print
[ 327]        :                                       
[ 328]    08B2: BA 00 00                              lea     dx, new_line
[ 329]    08B5: E8 55 00                              call    print
[ 330]        :                                       
[ 331]    08B8: BA 03 00                              lea     dx, game_draw
[ 332]    08BB: E8 4F 00                              call    print
[ 333]        :                                       
[ 334]    08BE: BA 00 00                              lea     dx, new_line
[ 335]    08C1: E8 49 00                              call    print
[ 336]        :                                       
[ 337]    08C4: BA 37 05                              lea     dx, game_over_message
[ 338]    08C7: E8 43 00                              call    print
[ 339]        :                                       
[ 340]    08CA: BA 53 05                              lea     dx, player_message
[ 341]    08CD: E8 3D 00                              call    print
[ 342]        :                                       
[ 343]    08D0: BA 34 05                              lea     dx, player
[ 344]    08D3: E8 37 00                              call    print
[ 345]        :                                       
[ 346]    08D6: BA 5B 05                              lea     dx, win_message
[ 347]    08D9: E8 31 00                              call    print
[ 348]        :                                       
[ 349]    08DC: EB 49                                 jmp     fim
[ 350]        :                                       
[ 351]    08DE:                                       game_end_draw:
[ 352]    08DE: E8 31 00                              call    clear_screen
[ 353]        :                                       
[ 354]    08E1: BA 9D 05                              lea     dx, game_end_draw_message
[ 355]    08E4: E8 26 00                              call    print
[ 356]        :                                       
[ 357]    08E7: EB 3E                                 jmp     fim
[ 358]        :                                       
[ 359]        :                                       
[ 360]    08E9:                                       set_game_pointer:
[ 361]    08E9: BE 03 00                              lea     si, game_draw
[ 362]    08EC: BB 2A 05                              lea     bx, game_pointer
[ 363]        :                                       
[ 364]    08EF: B9 09 00                              mov     cx, 9
[ 365]        :                                       
[ 366]    08F2:                                       loop_1:
[ 367]    08F2: 83 F9 06                              cmp     cx, 6
[ 368]    08F5: 74 07                                 je      add_1
[ 369]        :                                       
[ 370]    08F7: 83 F9 03                              cmp     cx, 3
[ 371]    08FA: 74 02                                 je      add_1
[ 372]        :                                       
[ 373]    08FC: EB 05                                 jmp     add_2
[ 374]        :                                       
[ 375]    08FE:                                       add_1:
[ 376]    08FE: 83 C6 01                              add     si, 1
[ 377]    0901: EB 00                                 jmp     add_2
[ 378]        :                                       
[ 379]    0903:                                       add_2:
[ 380]    0903: 3E 89 37                              mov     ds:[bx], si
[ 381]    0906: 83 C6 02                              add     si, 2
[ 382]        :                                       
[ 383]    0909: 43                                    inc     bx
[ 384]    090A: E2 E6                                 loop    loop_1
[ 385]        :                                       
[ 386]    090C: C3                                    ret
[ 387]        :                                       
[ 388]    090D:                                       print:      ; print dx content
[ 389]    090D: B4 09                                 mov     ah, 9
[ 390]    090F: CD 21                                 int     21h
[ 391]        :                                       
[ 392]    0911: C3                                    ret
[ 393]        :                                       
[ 394]        :                                       
[ 395]    0912:                                       clear_screen:       ; get and set video mode
[ 396]    0912: B4 0F                                 mov     ah, 0fh
[ 397]    0914: CD 10                                 int     10h
[ 398]        :                                       
[ 399]    0916: B4 00                                 mov     ah, 0
[ 400]    0918: CD 10                                 int     10h
[ 401]        :                                       
[ 402]    091A: C3                                    ret
[ 403]        :                                       
[ 404]        :                                       
[ 405]    091B:                                       read_keyboard:  ; read keybord and return content in ah
[ 406]    091B: B4 01                                 mov     ah, 1
[ 407]    091D: CD 21                                 int     21h
[ 408]        :                                       
[ 409]    091F: C3                                    ret
[ 410]        :                                       
[ 411]    0920:                                       position_taken:
[ 412]    0920: BA 74 05                              lea     dx, wrong_position_message
[ 413]    0923: E8 E7 FF                              call    print
[ 414]        :                                       
[ 415]    0926: C3                                    ret
[ 416]        :                                       
[ 417]        :                                       
[ 418]    0927:                                       fim:
[ 419]    0927: EB FE                                 jmp     fim
[ 420]        :                                       
[ 421]        :                                       code ends
[ 422]        :                                       
[ 423]        :                                       end start
[ 424]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 29      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 06      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 02      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 5F      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: F5      -   check sum (l.byte)
0013: B7      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 6F      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 6F      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022: 06      -   relocation table - offset inside segment (l.byte)
0023: 00      -   relocation table - offset inside segment (h.byte)
0024: 6F      -   relocation table - segment anchor (l.byte)
0025: 00      -   relocation table - segment anchor (h.byte)
0026 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
